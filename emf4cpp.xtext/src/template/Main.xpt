«IMPORT xtext»

«EXTENSION template::FQN»
«EXTENSION template::Rules»

«DEFINE main FOR Grammar»
«FILE fileName()+".g"-»
grammar «fileName()»;

options{
	language=C;
}

@lexer::includes{
#include <iostream>
#include <ecorecpp/util/debug.hpp>
}

@parser::includes{
//#include <token_to.hpp>
	«FOREACH metamodelDeclarations.ePackage AS pkg-»
#include <«pkg.getFQN()».hpp>
	«ENDFOREACH-»
#include <iostream>
#include <vector>
#include <ecorecpp/util/debug.hpp>
}

@parser::members{
// TODO: outta here
namespace xtextpp
{

template< typename T >
inline T token_to(pANTLR3_COMMON_TOKEN p)
{
	return T();
}

template<>
inline std::string token_to< std::string >(pANTLR3_COMMON_TOKEN p)
{
    ANTLR3_MARKER start = p->getStartIndex(p);
    ANTLR3_MARKER end = p->getStopIndex(p);
    return  std::string( (const char *)start, end-start+1 );
}

} // xtextpp

struct ast_node
{
public:
    size_t parent;
    ecore::EObject_ptr value;

    static std::vector< ast_node > ast;
    static size_t current;
    
    inline ast_node() : parent(current), value(NULL)
    {
    }

public:
    
    static inline void start()
    {
        ast_node new_node;
    	current = ast.size();
    	ast.push_back(new_node);
    }
    
    static inline void end(ecore::EObject_ptr _returned = NULL)
    {
    	ast.back().value = _returned;
    	current = ast.back().parent;
    }
    
    template< typename T >
    static inline T find(const std::string& _id)
    {
    	long index = current;
    	size_t parent = ast.back().parent;
    	
    	while(index >= 0)
    	{
    		
    		if (ast[index].parent == parent)
    		{
    			T _t = dynamic_cast< T >(ast[index].value);
    			
    			if (_t && _t->getName() == _id) // TODO: use Reflective API
    				return _t;
    		}
    		
    		if (index && index == parent)
    			parent = ast[parent].parent;
    			    	
    		--index;
    	}
    	
    	std::cerr<< "Not found!" << std::endl;
    	return NULL;
    }
    
    static inline void reset()
    {
    	ast.clear();
    	current = 0;
    }
};
size_t ast_node::current = 0;
std::vector< ast_node > ast_node::ast;

}

	«EXPAND GrammarBody FOR this»
«ENDFILE»
«EXPAND ParserClass::class FOR this»
«ENDDEFINE»

«DEFINE GrammarBody FOR Grammar»
	«FOREACH rules AS rule-»
«rule.getName()» «rule.returns()»
@init{
    DEBUG_MSG (cout, "START «rule.name»");
    «IF ParserRule.isInstance(rule)-»
    ast_node::start();
    «ENDIF-»
}
@after{
    DEBUG_MSG (cout, "END «rule.name»");
    «IF ParserRule.isInstance(rule)-»
    ast_node::end(_returned);
    «ENDIF-»
}
:
	«rule.alternatives.expand()» «rule.post()»
;

	«ENDFOREACH-»
	
	«FOREACH usedGrammars AS e-»
		«EXPAND GrammarBody FOR e-»
	«ENDFOREACH-»
«ENDDEFINE»

