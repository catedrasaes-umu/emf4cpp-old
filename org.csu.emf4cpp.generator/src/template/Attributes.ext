/*
 * Attributes.ext
 * Copyright (C) CÃ¡tedra SAES-UMU 2010 <andres.senac@um.es>
 * 
 * EMF4CPP is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * EMF4CPP is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
import org::eclipse::emf::ecore;

extension template::Types;
extension template::Member;

// Attribute member name
cached String getAttrMemberName(EAttribute this) :
	getMemberPrefix() + name;

// Declaration
String getCPPDeclaration(EAttribute this) : getCPPTypeSignature() + " " + getAttrMemberName();


// Set
String getSetCPPSignature(EAttribute this, String prefix) :
	"void " + prefix + "set"+ name.toFirstUpper() + " (" + getCPPParameterType() + " _" + name + ")";
	
String getSetCPPSignature(EAttribute this) : 
	getSetCPPSignature("");
	
/*
// Get
String getGetCPPSignature(EAttribute this, String prefix) :
	getCPPReturnType() + " " + prefix  +  (isBoolean() ? "is" : "get") + name.toFirstUpper() + " ()";

String getGetCPPSignature(EAttribute this) : 
	getGetCPPSignature("");
*/

// Get, const
String getGetCPPSignatureConst(EAttribute this, String prefix) :
	getCPPReturnTypeConst() + " " + prefix  +  (isBoolean() ? "is" : "get") + name.toFirstUpper() + " () const";

String getGetCPPSignatureConst(EAttribute this) : 
	getGetCPPSignatureConst("");

// Add. Only if isListAttr(this)
String getAddCPPSignature(EAttribute this, String prefix) :
	"void " + prefix + "add"+ name.toFirstUpper() + " (" + getCPPTypeSignatureImplConst() + " _new_element_in_" + name + ")";
	
String getAddCPPSignature(EAttribute this) : 
	getAddCPPSignature("");
	
// SetAt. Only if isListAttr(this)
String getSetAtCPPSignature(EAttribute this, String prefix) :
	"void " + prefix + "set"+ name.toFirstUpper() + "At ( size_t _position, " + getCPPTypeSignatureImplConst() + " _new_element_in_" + name + ")";
	
String getSetAtCPPSignature(EAttribute this) : 
	getSetAtCPPSignature("");

// DeleteAt. Only if isListAttr(this)
String getDeleteAtCPPSignature(EAttribute this, String prefix) :
	"void " + prefix + "delete"+ name.toFirstUpper() + "At ( size_t _position )";
	
String getDeleteAtCPPSignature(EAttribute this) : 
	getDeleteAtCPPSignature("");

// Default value
String getDefaultValue(EAttribute this) :
	if defaultValueLiteral != null then
		getAttrMemberName() + "(" + defaultValueLiteral+ ")"
	else
		getAttrMemberName() + "()" 
;

String getDefaultValue(EReference this) :
	if upperBound == 1 then
		getMemberName() + "(0)"
	else
		getMemberName() + "()"
;

String getDefaultValue(EStructuralFeature this) :
	if EReference.isInstance(this) then
		((EReference)this).getDefaultValue()
	else
		((EAttribute)this).getDefaultValue()
;

boolean getID(EAttribute this):
	this.ID
;
