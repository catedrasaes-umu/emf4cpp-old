/*
 * FQN.ext
 * Copyright (C) CÃ¡tedra SAES-UMU 2010 <andres.senac@um.es>
 * 
 * EMF4CPP is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * EMF4CPP is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import org::eclipse::emf::ecore;

extension template::Member;
extension template::Keywords;

String getDirFQN(EPackage this) :
	if this.ESuperPackage == null then
		""
	else
		if this.ESuperPackage.ESuperPackage == null then
			ESuperPackage.name + "/"
		else
			this.ESuperPackage.getDirFQN() + name
;

String getFQN(EPackage this, String separator) : this.ESuperPackage != null ? this.ESuperPackage.getFQN(separator) + separator + this.name : this.name;

// prefix & suffix for normal classifiers
String getFQNPrefix(EClassifier this, String separator) : this.EPackage != null ? this.EPackage.getFQN(separator) + separator : "";
String getFQNSuffix(EClassifier this, String separator) : this.name;

// prefix & suffix for packages
String getFQNPrefix(EPackage this, String separator) : this.ESuperPackage != null ? this.ESuperPackage.getFQN(separator) + separator : "";
String getFQNSuffix(EPackage this, String separator) : this.name;

String getFQN(EClassifier this, String separator) : this.getFQNPrefix(separator) + this.getFQNSuffix(separator);

String getFQN(EOperation this, String separator) : this.EContainingClass.getFQN(separator) + separator + this.name ;

String getFQN(EPackage this) : this.getFQN("::");
String getFQN(EOperation this) : this.getFQN("::");
String getFQN(EClassifier this) : this.getFQN("::");

cached String getPackagePrefix(EPackage this, String separator) : 
	getFQN(separator) + separator + name.toFirstUpper() + "Package"
;

cached String getPackagePrefix(EPackage this) : 
	getPackagePrefix("/")
;

cached String getFactoryPrefix(EPackage this, String separator) : 
	getFQN(separator) + separator + name.toFirstUpper() + "Factory"
;

cached String getFactoryPrefix(EPackage this) : 
	getFactoryPrefix("/")
;

String getPackageGetAttribute(EPackage this, EClassifier class) :
	getNotReservedName("get"+class.name.toFirstUpper())
;

String getPackageAttribute(EPackage this, EClassifier class):
	// TODO: cambiar por class.EPackage == this cuando no se genere ECore
	if class.EPackage.name == this.name then
		getMemberPrefix() + class.name.toFirstUpper() + class.eClass().name
	else
		let pkg = class.EPackage :
		let prefix = "::" + pkg.getFQN()+ "::" + pkg.name.toFirstUpper() + "Package":
		"dynamic_cast< " + prefix + "* >(" + prefix + "::_instance())->" + getPackageGetAttribute(class) +"()"
;

cached String getPackageName(EPackage this) :
	name.toFirstUpper() + "Package"
;

cached String getFactoryName(EPackage this) :
	name.toFirstUpper() + "Factory"
;

cached String getHeaderDef(EPackage this) :
	getFQN("_").toUpperCase()
;

cached String getHeaderDef(EClassifier this) :
	getFQN("_").toUpperCase()
;

cached String getFeatureIDFQN(EStructuralFeature this) :
	EContainingClass.name.toUpperCase() + "__" + name.toUpperCase()
;

cached String getFeatureIDFQN(EStructuralFeature this, EClass class) :
	class.name.toUpperCase() + "__" + name.toUpperCase()
;

cached String getFeatureIDFQN(EStructuralFeature this, EPackage current) :
	let pkg = EContainingClass.EPackage :
	if EContainingClass.EPackage == current then
		getFeatureIDFQN()
	else
		"::" + pkg.getFQN() + "::" + pkg.getPackageName() + "::" + getFeatureIDFQN()
;

