«REM»
EClassCPP.xpt
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Classes»
«EXTENSION template::Operations»
«EXTENSION template::Attributes»
«EXTENSION template::References»
«EXTENSION template::Packages»
«EXTENSION template::Member»
«EXTENSION template::Types»

«DEFINE cpp FOR EClass»
«FILE getFQN("/")+".cpp"-»
«EXPAND template::License::License FOR getFQN("/")+".cpp"-»
#include "«name».hpp"
«FOREACH getAllIncludeFiles() AS include-»
#include <«include».hpp>
«ENDFOREACH-»
#include <ecore/EObject.hpp>
#include <ecore/EClass.hpp>
#include "«EPackage.getPackagePrefix()».hpp"
#include <ecorecpp/mapping.hpp>

#ifdef ECORECPP_NOTIFICATION_API
#include <ecorecpp/notify.hpp>
#endif

using namespace ::«EPackage.getFQN()»;

// Default constructor
«name»::«name»()
«LET this.EAttributes.select(a|a.defaultValueLiteral != null) AS attrs-»
«LET this.EReferences.select(r|r.upperBound == 1) AS refs-»
«LET attrs.getDefaultValue().addAll(refs.getDefaultValue()) AS e-»
«IF !e.isEmpty -»
: «FOREACH e AS df SEPARATOR ", "»«df»«ENDFOREACH»
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
{

«FOREACH EReferences.select(e|e.upperBound != 1) AS ref-»
    «ref.getRefMemberName()».reset(new «ref.getListImpl()»(«ref.getListImplConstructorParameters()»));
«ENDFOREACH-»

«PROTECT CSTART '/*' CEND '*/' ID name+"Impl__"+name+"Impl" DISABLE»
// Please, enable the protected region if you add manually written code.
// To do this, add the keyword ENABLED before START.
«ENDPROTECT»

#ifdef ECORECPP_NOTIFICATION_API
    m_eDeliver = false;
#endif
}

«name»::~«name»()
{
    «FOREACH this.EReferences.select(e|e.containment) AS ref-»
        «IF ref.upperBound == 1-»
    if («ref.getMemberName()»)
    {
        delete «ref.getMemberName()»;
    }
        «ENDIF-»
    «ENDFOREACH-»
}

«PROTECT CSTART '/*' CEND '*/' ID name+".cpp" DISABLE»
// Please, enable the protected region if you add manually written code.
// To do this, add the keyword ENABLED before START.
«ENDPROTECT»

// Attributes
«FOREACH this.EAttributes AS at»
«at.getGetCPPSignatureConst(name+"::")»
{
    return «at.getAttrMemberName()»;
}

«at.getSetCPPSignature(name+"::")»    
{
#ifdef ECORECPP_NOTIFICATION_API
    «at.getCPPTypeSignature()» _old_«at.name» = «at.getAttrMemberName()»;
#endif
    «at.getAttrMemberName()» = _«at.name»;
#ifdef ECORECPP_NOTIFICATION_API
    if (eNotificationRequired())
    {
        ::ecorecpp::notify::Notification notification(
                ::ecorecpp::notify::Notification::SET,
                (::ecore::EObject_ptr) this,
                (::ecore::EStructuralFeature_ptr) «EPackage.getFeatureGetMemberCall(at)»,
                _old_«at.name»,
                «at.getAttrMemberName()»
            );
        eNotify(&notification);
    }
#endif
}

«IF at.isList() || at.isMultiple()-»
«at.getAddCPPSignature(name+"::")»    
{
    «at.getAttrMemberName()».push_back( _new_element_in_«at.name» );
}

«at.getSetAtCPPSignature(name+"::")»    
{
    «LET at.getAttrMemberName() AS attrn-»
    «IF at.upperBound > 0-»«REM»must be greater than 1 also«ENDREM»
    if (_position + 1 > «at.upperBound»)
        throw "Attribute counter out of bounds!";
    «ENDIF-»
    if ( _position >= «attrn».size() )
        «attrn».resize(_position + 1, 0);

    «attrn»[_position] = _new_element_in_«at.name»;
    «ENDLET-»
}

«at.getDeleteAtCPPSignature(name+"::")»    
{
    «LET at.getAttrMemberName() AS attrn-»
    «IF at.upperBound > 0-»«REM»must be greater than 1 also«ENDREM»
    if (_position + 1 > «at.upperBound»)
        throw "Attribute counter out of bounds!";
    «ENDIF-»
    if (_position >= «attrn».size())
        throw "Attribute counter out of bounds!";
    
    // TODO: This is not actually quite true
    if (_position == «attrn».size() - 1)
        «attrn».resize(_position);
    «ENDLET-»
}
«ENDIF-»
«ENDFOREACH-»

// References
«FOREACH this.EReferences AS ref-»
«ref.getGetCPPSignature(name+"::")»
{
    «IF !ref.isMultiple()-»
    return «ref.getRefMemberName()»;
    «ELSE-»
    return *«ref.getRefMemberName()»;
    «ENDIF-»
}

    «IF !ref.isMultiple()-»
«ref.getSetCPPSignature(name+"::")» 
{
    «ref.getCPPTypeSignature()» _old_«ref.name» = «ref.getRefMemberName()»;

    «ref.getRefMemberName()» = _«ref.name»;

#ifdef ECORECPP_NOTIFICATION_API
    if (eNotificationRequired())
    {
        ::ecorecpp::notify::Notification notification(
                ::ecorecpp::notify::Notification::SET,
                (::ecore::EObject_ptr) this,
                (::ecore::EStructuralFeature_ptr) «EPackage.getFeatureGetMemberCall(ref)»,
                _old_«ref.name»,
                «ref.getRefMemberName()»
            );
        eNotify(&notification);
    }
#endif

    «IF ref.containment-»
    delete _old_«ref.name»;
    «ENDIF-»
}

    «ENDIF-»
«ENDFOREACH-»

«ENDFILE»
«ENDDEFINE»
