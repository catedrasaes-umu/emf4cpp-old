«REM»
FactoryImpl.xpt
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Mapping»
«EXTENSION template::Types»

«DEFINE hppcpp FOR EPackage»
«FILE getFactoryPrefix()+"Impl.cpp"-»
«EXPAND template::License::License FOR getFactoryPrefix()+"Impl.cpp"-»
#include <«getFactoryPrefix()».hpp>
#include <«getPackagePrefix()».hpp>
«FOREACH EClassifiers.typeSelect(EClass) AS class-»
#include <«class.getFQN("/")».hpp>
«ENDFOREACH-»

#include <ecore.hpp>
#include <ecorecpp/mapping.hpp>

using namespace ::«getFQN()»;

«name.toFirstUpper()»Factory::«name.toFirstUpper()»Factory()
{
    s_instance.reset(this);
}

::ecore::EObject_ptr «name.toFirstUpper()»Factory::create ( ::ecore::EClass_ptr _eClass)
{
    switch(_eClass->getClassifierID())
    {
    «FOREACH EClassifiers.typeSelect(EClass) AS class-»
    case «name.toFirstUpper()»Package::«class.name.toUpperCase()»:
        return create«class.name»();
    «ENDFOREACH-»
    default:
        throw "IllegalArgumentException";
    }
}

::ecore::EJavaObject «name.toFirstUpper()»Factory::createFromString ( ::ecore::EDataType_ptr _eDataType, ::ecore::EString const& _literalValue)
{
    switch(_eDataType->getClassifierID())
    {
    «FOREACH EClassifiers.typeSelect(EDataType).select(e|e.serializable && e.ETypeParameters.isEmpty) AS edt-»
        «IF EEnum.isInstance(edt)-»
    case «name.toFirstUpper()»Package::«edt.name.toUpperCase()»:
        {
          ::ecore::EJavaObject _any;
             «name.toFirstUpper()»Package_ptr _epkg =
                 dynamic_cast< ::«getFQN()»::«name.toFirstUpper()»Package_ptr >(getEPackage());
            return _epkg->get«edt.name.toFirstUpper()»()->getEEnumLiteralByLiteral(_literalValue)->getValue();
        }
        «ELSE-»
    case «name.toFirstUpper()»Package::«edt.name.toUpperCase()»:
        return ::ecorecpp::mapping::string_traits< ::«edt.getFQN()» >::fromString(_literalValue);
        «ENDIF-»
    «ENDFOREACH-»
    default:
        throw "IllegalArgumentException";
    }
}

::ecore::EString «name.toFirstUpper()»Factory::convertToString ( ::ecore::EDataType_ptr _eDataType, ::ecore::EJavaObject const& _instanceValue)
{
    switch(_eDataType->getClassifierID())
    {
    «FOREACH EClassifiers.typeSelect(EDataType).select(e|e.serializable  && e.ETypeParameters.isEmpty) AS edt-»
        «IF EEnum.isInstance(edt)-»
    case «name.toFirstUpper()»Package::«edt.name.toUpperCase()»:
         {
             «name.toFirstUpper()»Package_ptr _epkg =
                 ::«getFQN()»::instanceOf< ::«getFQN()»::«name.toFirstUpper()»Package >(getEPackage());
            ::ecore::EInt _value = ::ecorecpp::mapping::any::any_cast< ::ecore::EInt > (_instanceValue);
            return _epkg->get«edt.name.toFirstUpper()»()->getEEnumLiteral(_value)->getName();
        }
        «ELSE-»
    case «name.toFirstUpper()»Package::«edt.name.toUpperCase()»:
        return ::ecorecpp::mapping::string_traits< ::«edt.getFQN()» >::toString(_instanceValue);
        «ENDIF-»
    «ENDFOREACH-»
    default:
        throw "IllegalArgumentException";
    }
}

«FOREACH EClassifiers.typeSelect(EClass) AS class-»
«class.name»_ptr «name.toFirstUpper()»Factory::create«class.name»()
{
    return new «class.name»();
}
«ENDFOREACH-»

«ENDFILE»

«ENDDEFINE»