«REM»
CMakeLists.ext
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»

«DEFINE MainCMake FOR EPackage»
«FILE "CMakeLists.txt" NOOVERWRITE-»
«EXPAND template::License::LicenseMakefile FOR "CMakeLists.txt"-»
cmake_minimum_required(VERSION 2.6)

project(emf4cpp-«name» CXX)

FILE(GLOB CMAKES "${CMAKE_CURRENT_SOURCE_DIR}/*.cmake")

foreach(cmake ${CMAKES})
  include(${cmake})
endforeach(cmake)

«REM»
set(CPACK_GENERATOR TGZ STGZ)
set(CPACK_PACKAGE_VERSION_MAJOR "0")
set(CPACK_PACKAGE_VERSION_MINOR "0")
set(CPACK_PACKAGE_VERSION_PATCH "1")
set(CPACK_PACKAGE_VENDOR "Cátedra SAES-UMU")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Andrés Senac <andres.senac@um.es>")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Cátedra SAES-UMU: EMF4CPP «name» metamodel")
set(CPACK_SOURCE_GENERATOR TGZ)
include(CPack)
«ENDREM»

«ENDFILE-»
«ENDDEFINE»

«DEFINE CMake FOR EPackage»
«LET getFQN("_") AS fqn»
«FILE fqn+".cmake"-»
«EXPAND template::License::LicenseMakefile FOR fqn+".cmake"-»
set(CMAKE_CXX_FLAGS "")
set(CMAKE_CXX_FLAGS_DEBUG "-Wall -g -DDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "-Wall -O3 -funroll-loops")

set(«fqn»_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")»Impl.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")»Impl.cpp
    «FOREACH EClassifiers.typeSelect(EClass) AS class-»
    ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")»Impl.cpp
    «ENDFOREACH-»
   )
   
set(«fqn»_HEADERS
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")».hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")»_forward.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")».hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")».hpp
    «FOREACH EClassifiers.typeSelect(EClass) AS class-»
    ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")».hpp
    «ENDFOREACH-»
   )

install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")».hpp DESTINATION include/emf4cpp/«getDirFQN()»)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")»_forward.hpp DESTINATION include/emf4cpp/«getDirFQN()»)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")».hpp DESTINATION include/emf4cpp/«getFQN("/")»)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")».hpp DESTINATION include/emf4cpp/«getFQN("/")»)   
    «FOREACH EClassifiers.typeSelect(EClass) AS class-»
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")».hpp DESTINATION include/emf4cpp/«getFQN("/")»)
    «ENDFOREACH-»
   
include_directories(${CMAKE_CURRENT_SOURCE_DIR} «GLOBALVAR ecorePath» «GLOBALVAR ecoreCppPath»)

add_library(emf4cpp-«fqn» SHARED ${«fqn»_HEADERS} ${«fqn»_SOURCES})
set_target_properties(emf4cpp-«fqn» PROPERTIES VERSION 0.0.1 SOVERSION 1)

install(TARGETS emf4cpp-«fqn» DESTINATION lib)

«ENDFILE»
«ENDLET»
«ENDDEFINE»
