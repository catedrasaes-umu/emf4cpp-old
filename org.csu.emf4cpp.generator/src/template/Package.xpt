«REM»
Package.xpt
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Mapping»
«EXTENSION template::IDs»
«EXTENSION template::Packages»
«EXTENSION template::Types»

«DEFINE hppcpp FOR EPackage»
«FILE getPackagePrefix()+".hpp"-»
«EXPAND template::License::License FOR getPackagePrefix()+".hpp"-»
#ifndef _«getHeaderDef()»PACKAGE_HPP
#define _«getHeaderDef()»PACKAGE_HPP

#include <ecore/EPackage.hpp>
#include <«getFQN("/")»_forward.hpp>

«FOREACH getPackageIncludeFiles() AS e-»
#include <«e.getFQN("/")»/«e.getPackageName()».hpp>
«ENDFOREACH-»

«EXPAND template::EClassHPP::namespaces_begin FOR this-»

class «name.toFirstUpper()»Package : public virtual ::ecore::EPackage
{
public:

    static «name.toFirstUpper()»Package_ptr _instance();

    // IDs for classifiers
«FOREACH EClassifiers.sortBy(e|e.name).sortBy(e|e.name.toUpperCase()) AS class ITERATOR it»
    static const int «class.name.toUpperCase()» = «it.counter0»;
«ENDFOREACH»

«FOREACH getFeatures() AS ef ITERATOR it»
    static const int «ef.getFeatureIDFQN()» = «getFeatureIDValue(ef)»;
«ENDFOREACH»

«FOREACH EClassifiers.typeSelect(EClass).sortBy(e|e.name.toUpperCase()) AS class»
    // IDs for classifiers for class «class.name» 
   «FOREACH class.getParentsEstructuralFeatures() AS ef»
    static const int «ef.getFeatureIDFQN(class)» = «ef.getFeatureIDFQN(this)»;
   «ENDFOREACH»
«ENDFOREACH»

    // EClassifiers methods
«FOREACH EClassifiers AS class»
    virtual ::ecore::«class.eClass().name»_ptr «getPackageGetAttribute(class)»();
«ENDFOREACH»

    // EStructuralFeatures methods
«FOREACH this.getStructuralFeatures() AS ef»
    virtual «ef.eClass().getCPP()» «getFeatureGetMember(ef)»();
«ENDFOREACH»

protected:

    static std::auto_ptr< «name.toFirstUpper()»Package > s_instance;

    «name.toFirstUpper()»Package();
    
    // EClass instances 
«FOREACH EClassifiers.typeSelect(EClass) AS class»
    ::ecore::EClass_ptr «getPackageAttribute(class)»;
«ENDFOREACH»

    // EEnuminstances 
«FOREACH EClassifiers.typeSelect(EEnum) AS enum»
    ::ecore::EEnum_ptr «getPackageAttribute(enum)»;
«ENDFOREACH»

    // EDataType instances 
«FOREACH EClassifiers.typeSelect(EDataType).select(e|!EEnum.isInstance(e)) AS dt»
    ::ecore::EDataType_ptr «getPackageAttribute(dt)»;
«ENDFOREACH»

    // EStructuralFeatures instances
«FOREACH this.getStructuralFeatures() AS ef»
    «ef.eClass().getCPP()» «getFeatureMember(ef)»;
«ENDFOREACH»
};

«EXPAND template::EClassHPP::namespaces_end FOR this»

#endif // _«getHeaderDef()»PACKAGE_HPP

«ENDFILE»

«FILE getPackagePrefix()+".cpp"-»
«EXPAND template::License::License FOR getPackagePrefix()+".cpp"-»
#include <«getPackagePrefix()».hpp>

using namespace ::«getFQN()»;

std::auto_ptr< ::«getPackagePrefix("::")» > «name.toFirstUpper()»Package::s_instance;

::«getPackagePrefix("::")»_ptr «name.toFirstUpper()»Package::_instance()
{
    if (!s_instance.get())
        new «name.toFirstUpper()»Package();
    return s_instance.get();
}

«ENDFILE»

«ENDDEFINE»