«REM»
PackageImpl.xpt
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Mapping»
«EXTENSION template::IDs»
«EXTENSION template::Packages»
«EXTENSION template::Attributes»
«EXTENSION template::Types»

«DEFINE hppcpp FOR EPackage»
«FILE getPackagePrefix()+"Impl.cpp"-»
«EXPAND template::License::License FOR getPackagePrefix()+"Impl.cpp"-»
#include <«getPackagePrefix()».hpp>
#include <«getFactoryPrefix()».hpp>
#include <ecore.hpp>
#include <ecore/EcorePackage.hpp>
#include <ecore/EClass.hpp>
#include <ecore/EAttribute.hpp>
#include <ecore/EReference.hpp>
#include <ecore/EOperation.hpp>
#include <ecore/EParameter.hpp>
#include <ecore/EEnum.hpp>
#include <ecore/EEnumLiteral.hpp>
#include <ecore/EDataType.hpp>
#include <ecore/EGenericType.hpp>
#include <ecore/ETypeParameter.hpp>
«LET getExternalTypes() AS types-»
    «FOREACH types.EPackage.toSet() AS pkg-»
#include <«pkg.getFQN("/")»/«pkg.getPackageName()».hpp>
    «ENDFOREACH-»
    «FOREACH types.typeSelect(EClass) AS e-»
#include <«e.getFQN("/")».hpp>
    «ENDFOREACH-»
«ENDLET-»

using namespace ::«getFQN()»;

«name.toFirstUpper()»Package::«name.toFirstUpper()»Package()
{    

    s_instance.reset(this);
    
    // Factory
    ::ecore::EFactory_ptr _fa = «name.toFirstUpper()»Factory::_instance();
    setEFactoryInstance(_fa);
    _fa->setEPackage(this);
    
«IF !EClassifiers.typeSelect(EClass).EOperations.isEmpty-»
    ::ecore::EOperation_ptr _op;
    «IF !EClassifiers.typeSelect(EClass).EOperations.EParameters.isEmpty-»
    ::ecore::EParameter_ptr _pa;
    «ENDIF-»
«ENDIF-»

    // Create classes and their features
«FOREACH EClassifiers.typeSelect(EClass) AS class»
    // «class.name»
    «getPackageAttribute(class)» = new ::ecore::EClass();
    «getPackageAttribute(class)»->setClassifierID(«class.name.toUpperCase()»);
    «getPackageAttribute(class)»->setEPackage(this);
    getEClassifiers().push_back(«getPackageAttribute(class)»);   
    «FOREACH class.EAttributes AS at-»
    «getFeatureMember(at)» = new ::ecore::EAttribute();
    «getFeatureMember(at)»->setFeatureID(«at.getCPPFQN()»);
    «getPackageAttribute(class)»->getEStructuralFeatures().push_back(«getFeatureMember(at)»);
    «ENDFOREACH-»
    «FOREACH class.EReferences AS ref-»
    «getFeatureMember(ref)» = new ::ecore::EReference();
    «getFeatureMember(ref)»->setFeatureID(«ref.getCPPFQN()»);
    «getPackageAttribute(class)»->getEStructuralFeatures().push_back(«getFeatureMember(ref)»);
    «ENDFOREACH-»
«ENDFOREACH»

    // Create enums
«FOREACH EClassifiers.typeSelect(EEnum) AS enum»
    «getPackageAttribute(enum)» = new ::ecore::EEnum();
    «getPackageAttribute(enum)»->setClassifierID(«enum.name.toUpperCase()»);
    «getPackageAttribute(enum)»->setEPackage(this);
    getEClassifiers().push_back(«getPackageAttribute(enum)»);
«ENDFOREACH»

    // Create data types
«FOREACH EClassifiers.typeSelect(EDataType).select(e|!EEnum.isInstance(e)) AS dt»
    «getPackageAttribute(dt)» = new ::ecore::EDataType();
    «getPackageAttribute(dt)»->setClassifierID(«dt.name.toUpperCase()»);
    «getPackageAttribute(dt)»->setEPackage(this);
    getEClassifiers().push_back(«getPackageAttribute(dt)»);
«ENDFOREACH»

«FOREACH ESubpackages AS sub-»
    getESubpackages().push_back( ::«sub.getPackagePrefix("::")»::_instance());
«ENDFOREACH-»

    // Initialize package
    setName("«this.name»");
    setNsPrefix("«this.nsPrefix»");
    setNsURI("«this.nsURI»");

«IF !EClassifiers.typeSelect(EDataType).ETypeParameters.isEmpty-»
    // Create type parameters
    {
        ::ecore::ETypeParameter_ptr _tp;
«FOREACH EClassifiers.typeSelect(EDataType).select(e|!e.ETypeParameters.isEmpty) AS dt»
         «FOREACH dt.ETypeParameters AS tp-»
        _tp = new ::ecore::ETypeParameter();
        _tp->setName("«tp.name»");
         «getPackageAttribute(dt)»->getETypeParameters().push_back( _tp );
        «ENDFOREACH-»
«ENDFOREACH-»
    }
«ENDIF-»

    // TODO: bounds for type parameters
    
    // Add supertypes to classes
«FOREACH EClassifiers.typeSelect(EClass) AS class-»   
    «FOREACH class.ESuperTypes AS st-»
    «getPackageAttribute(class)»->getESuperTypes().push_back(«getPackageAttribute(st)»);
    «ENDFOREACH-»
«ENDFOREACH-»

    // TODO: Initialize classes and features; add operations and parameters
    // TODO: GenericTypes
«FOREACH EClassifiers.typeSelect(EClass) AS class-»
    // «class.name»
    «getPackageAttribute(class)»->setName("«class.name»");
    «getPackageAttribute(class)»->setAbstract(«class.abstract»);
    «getPackageAttribute(class)»->setInterface(«class.interface»);
    «FOREACH class.EAttributes AS at ITERATOR it-»
    «getFeatureMember(at)»->setEType(«getPackageAttribute(at.EType)»);
        «IF !at.EGenericType.ETypeArguments.isEmpty-»
    {
        ::ecore::EGenericType_ptr _g0 = new ::ecore::EGenericType();
        _g0->setEClassifier(«getPackageAttribute(at.EGenericType.EClassifier)»);
            «FOREACH at.EGenericType.ETypeArguments AS ta ITERATOR it-»
        ::ecore::EGenericType_ptr _g«it.counter1» = new ::ecore::EGenericType();
                «IF ta.EClassifier != null-»
        _g«it.counter1»->setEClassifier(«getPackageAttribute(ta.EClassifier)»);
                «ENDIF-»
        _g0->getETypeArguments().push_back(_g«it.counter1»);
            «ENDFOREACH-»
        «getFeatureMember(at)»->setEGenericType(_g0);
    }
        «ENDIF-»
    «getFeatureMember(at)»->setName("«at.name»");
    «getFeatureMember(at)»->setDefaultValueLiteral("«at.defaultValueLiteral»");
    «getFeatureMember(at)»->setLowerBound(«at.lowerBound»);
    «getFeatureMember(at)»->setUpperBound(«at.upperBound»);
    «getFeatureMember(at)»->setTransient(«at.transient»);
    «getFeatureMember(at)»->setVolatile(«at.volatile»);
    «getFeatureMember(at)»->setChangeable(«at.changeable»);
    «getFeatureMember(at)»->setUnsettable(«at.unsettable»);
    «getFeatureMember(at)»->setID(«at.getID()»);
    «getFeatureMember(at)»->setUnique(«at.unique»);
    «getFeatureMember(at)»->setDerived(«at.derived»);
    «getFeatureMember(at)»->setOrdered(«at.ordered»);
    «ENDFOREACH-»
    «FOREACH class.EReferences AS ref ITERATOR it-»
    «getFeatureMember(ref)»->setEType(«getPackageAttribute(ref.EType)»);
        «IF !ref.EGenericType.ETypeArguments.isEmpty-»
    {
        ::ecore::EGenericType_ptr _g0 = new ::ecore::EGenericType();
        _g0->setEClassifier(«getPackageAttribute(ref.EGenericType.EClassifier)»);
            «FOREACH ref.EGenericType.ETypeArguments AS ta ITERATOR it-»
        ::ecore::EGenericType_ptr _g«it.counter1» = new ::ecore::EGenericType();
                «IF ta.EClassifier != null-»
        _g«it.counter1»->setEClassifier(«getPackageAttribute(ta.EClassifier)»);
                «ENDIF-»
        _g0->getETypeArguments().push_back(_g«it.counter1»);
            «ENDFOREACH-»
        «getFeatureMember(ref)»->setEGenericType(_g0);
    }
        «ENDIF-»
    «getFeatureMember(ref)»->setName("«ref.name»");
    «getFeatureMember(ref)»->setDefaultValueLiteral("«ref.defaultValueLiteral»");
    «getFeatureMember(ref)»->setLowerBound(«ref.lowerBound»);
    «getFeatureMember(ref)»->setUpperBound(«ref.upperBound»);
    «getFeatureMember(ref)»->setTransient(«ref.transient»);
    «getFeatureMember(ref)»->setVolatile(«ref.volatile»);
    «getFeatureMember(ref)»->setChangeable(«ref.changeable»);
    «getFeatureMember(ref)»->setContainment(«ref.containment»);
    «getFeatureMember(ref)»->setResolveProxies(«ref.resolveProxies»);
    «getFeatureMember(ref)»->setUnique(«ref.unique»);
    «getFeatureMember(ref)»->setDerived(«ref.derived»);
    «getFeatureMember(ref)»->setOrdered(«ref.ordered»);
        «IF ref.EOpposite != null-»
            «LET ref.EOpposite.EContainingClass AS opc-»
    «getFeatureMember(ref)»->setEOpposite( ::ecore::instanceOf< ::ecore::EReference > («getPackageAttribute(opc)»->getEStructuralFeatures()[«opc.EAttributes.size+opc.EReferences.indexOf(ref.EOpposite)»]));
            «ENDLET-»
        «ENDIF-»
    «ENDFOREACH-»
    «FOREACH class.EOperations AS op ITERATOR it-»
    _op = new ::ecore::EOperation();
        «IF op.EType != null-»
    _op->setEType(«getPackageAttribute(op.EType)»);
            «IF !op.EGenericType.ETypeArguments.isEmpty-»
    {
        ::ecore::EGenericType_ptr _g0 = new ::ecore::EGenericType();
        _g0->setEClassifier(«getPackageAttribute(op.EGenericType.EClassifier)»);
                «FOREACH op.EGenericType.ETypeArguments AS ta ITERATOR it-»
        ::ecore::EGenericType_ptr _g«it.counter1» = new ::ecore::EGenericType();
                    «IF ta.EClassifier != null-»
        _g«it.counter1»->setEClassifier(«getPackageAttribute(ta.EClassifier)»);
                    «ENDIF-»
        _g0->getETypeArguments().push_back(_g«it.counter1»);
                «ENDFOREACH-»
        _op->setEGenericType(_g0);
    }
            «ENDIF-»
        «ENDIF-»
    _op->setName("«op.name»");
    _op->setLowerBound(«op.lowerBound»);
    _op->setUpperBound(«op.upperBound»);
    _op->setUnique(«op.unique»);
    _op->setOrdered(«op.ordered»);
        «FOREACH op.EParameters AS pa-»
    _pa = new ::ecore::EParameter();
    _pa->setEType(«getPackageAttribute(pa.EType)»);
            «IF !pa.EGenericType.ETypeArguments.isEmpty-»
    {
        ::ecore::EGenericType_ptr _g0 = new ::ecore::EGenericType();
        _g0->setEClassifier(«getPackageAttribute(pa.EGenericType.EClassifier)»);
                «FOREACH pa.EGenericType.ETypeArguments AS ta ITERATOR it-»
        ::ecore::EGenericType_ptr _g«it.counter1» = new ::ecore::EGenericType();
                    «IF ta.EClassifier != null-»
        _g«it.counter1»->setEClassifier(«getPackageAttribute(ta.EClassifier)»);
                    «ENDIF-»
        _g0->getETypeArguments().push_back(_g«it.counter1»);
                «ENDFOREACH-»
        _pa->setEGenericType(_g0);
    }
            «ENDIF-»
    _pa->setName("«pa.name»");
    _pa->setLowerBound(«pa.lowerBound»);
    _pa->setUpperBound(«pa.upperBound»);
    _pa->setUnique(«pa.unique»);
    _pa->setOrdered(«pa.ordered»);
    _op->getEParameters().push_back(_pa);
        «ENDFOREACH-»
    «getPackageAttribute(class)»->getEOperations().push_back(_op);
    «ENDFOREACH-»
«ENDFOREACH»

    // TODO: Initialize data types
«FOREACH EClassifiers.typeSelect(EDataType).select(e|!EEnum.isInstance(e)) AS dt»
    // «dt.name»
    «getPackageAttribute(dt)»->setName("«dt.name»");
    «getPackageAttribute(dt)»->setSerializable(«dt.serializable»);
«ENDFOREACH»
«FOREACH EClassifiers.typeSelect(EEnum) AS ee»
    // «ee.name»
    «getPackageAttribute(ee)»->setName("«ee.name»");
    «getPackageAttribute(ee)»->setSerializable(«ee.serializable»);
    «FOREACH ee.ELiterals AS el ITERATOR it»
    {
        ::ecore::EEnumLiteral_ptr _el = new ::ecore::EEnumLiteral();
        // «el»
        _el->setName("«el»");
        _el->setValue(«it.counter0»);
        _el->setLiteral("«el»");
        _el->setEEnum(«getPackageAttribute(ee)»);
        «getPackageAttribute(ee)»->getELiterals().push_back(_el);
    }
    «ENDFOREACH-»
«ENDFOREACH»

    _initialize();
}

«FOREACH EClassifiers AS class-»
::ecore::«class.eClass().name»_ptr «name.toFirstUpper()»Package::«getPackageGetAttribute(class)»()
{
    return «getPackageAttribute(class)»;
}
«ENDFOREACH-»

«FOREACH getStructuralFeatures() AS ef-»  
«ef.eClass().getCPP()» «name.toFirstUpper()»Package::«getFeatureGetMember(ef)»()
{
    return «getFeatureMember(ef)»;
}
«ENDFOREACH-»

«ENDFILE»
«ENDDEFINE»