«REM»
ClassImplCPP.xpt
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Types»
«EXTENSION template::Member»
«EXTENSION template::Classes»
«EXTENSION template::Operations»
«EXTENSION template::Attributes»
«EXTENSION template::References»
«EXTENSION template::Packages»
«EXTENSION template::IDs»
«EXTENSION template::Mapping»

«DEFINE cpp FOR EClass»
«FILE getFQN("/")+"Impl.cpp"-»
«EXPAND template::License::License FOR getFQN("/")+"Impl.cpp"-»
#include "«name».hpp"
#include <«EPackage.getPackagePrefix()».hpp>
«FOREACH getAllIncludeFiles() AS include-»
#include <«include».hpp>
«ENDFOREACH-»
#include <ecore/EObject.hpp>
#include <ecore/EClass.hpp>
#include <ecore/EStructuralFeature.hpp>
#include <ecore/EReference.hpp>
#include <ecore/EObject.hpp>
#include <ecorecpp/mapping.hpp>

using namespace ::«EPackage.getFQN()»;

«PROTECT CSTART '/*' CEND '*/' ID name+"Impl.cpp" DISABLE»
// Please, enable the protected region if you add manually written code.
// To do this, add the keyword ENABLED before START.
«ENDPROTECT»

void «name»::_initialize()
{
    // Supertypes
    «FOREACH this.ESuperTypes AS st-»
    ::«st.getFQN()»::_initialize();
    «ENDFOREACH-»

    // Rerefences
    «FOREACH this.EReferences.select(e|e.containment) AS ref-»
        «IF ref.upperBound == 1-»
    if («ref.getMemberName()»)
    {
        «ref.getMemberName()»->_initialize();
        «ref.getMemberName()»->_setEContainer(
                this,
                «EPackage.getFeatureGetMemberCall(ref)»);
    }
        «ELSE-»
    for (size_t i = 0; i < «ref.getMemberName()»->size(); i++)
    {
        (*«ref.getMemberName()»)[i]->_initialize();
        (*«ref.getMemberName()»)[i]->_setEContainer(
                this,
                «EPackage.getFeatureGetMemberCall(ref)»);
    }
        «ENDIF-»
    «ENDFOREACH-»

    «PROTECT CSTART '/*' CEND '*/' ID name+"Impl__initialize" DISABLE»
    // Please, enable the protected region if you add manually written code.
    // To do this, add the keyword ENABLED before START.
    «ENDPROTECT»
}

// Operations
«FOREACH this.EOperations AS op»
«op.getCPPSignature(name+"::")»
{
    «PROTECT CSTART '/*' CEND '*/' ID (name+"Impl_"+op.getIPPFileUniqueName()) DISABLE»
    // Please, enable the protected region if you add manually written code.
    // To do this, add the keyword ENABLED before START.
    throw "UnsupportedOperationException: «op.getFQN()»";
    «ENDPROTECT»
}
«ENDFOREACH»

// EObject
::ecore::EJavaObject «name»::eGet ( ::ecore::EInt _featureID, ::ecore::EBoolean _resolve)
{
    ::ecore::EJavaObject _any;
    switch (_featureID)
    {
    «FOREACH EAllStructuralFeatures.select(e|!e.derived) AS ef-»
        case «ef.getCPPFQN()»:
            {
                «IF EReference.isInstance(ef)-»
                    «IF ef.upperBound == 1-»
                _any = static_cast< ::ecore::EObject* >(«ef.getMemberName()»);
                    «ELSE-»
                _any = «ef.getMemberName()»->asEListOf< ::ecore::EObject >();
                    «ENDIF-»
                «ELSE-»
                    «IF ef.upperBound == 1-»
                ::ecorecpp::mapping::any_traits< ::«ef.EType.getFQN()» >::toAny(_any, «ef.getMemberName()»);
                    «ELSE-»
                 std::vector < ::ecorecpp::mapping::any> _anys(«ef.getMemberName()».size());
                 for (size_t _i = 0; _i < «ef.getMemberName()».size(); _i++)
                    ::ecorecpp::mapping::any_traits< ::«ef.EType.getFQN()» >::toAny(_anys[_i], «ef.getMemberName()»[_i]);
                 _any = _anys;
                    «ENDIF-»
                «ENDIF-»
            }
            return _any;
    «ENDFOREACH»
    }
    throw "Error";
}

void «name»::eSet ( ::ecore::EInt _featureID, ::ecore::EJavaObject const& _newValue)
{
    switch (_featureID)
    {
    «FOREACH EAllStructuralFeatures.select(e|!e.derived) AS ef-»
        case «ef.getCPPFQN()» :
            {
                «IF EReference.isInstance(ef)-»
                    «IF ef.upperBound == 1-»
                ::ecore::EObject_ptr _t0 = ::ecorecpp::mapping::any::any_cast< ::ecore::EObject_ptr >(_newValue);
                «ef.getCPPTypeSignatureImpl()» _t1 = dynamic_cast< ::«ef.EType.getFQN()»_ptr >(_t0);
                ::«ef.EContainingClass.getFQN()»::set«ef.name.toFirstUpper()»(_t1);
                    «ELSE-»
                ::ecorecpp::mapping::EList_ptr _t0 = ::ecorecpp::mapping::any::any_cast< ::ecorecpp::mapping::EList_ptr >(_newValue);
                ::«ef.EContainingClass.getFQN()»::get«ef.name.toFirstUpper()»().clear();
                ::«ef.EContainingClass.getFQN()»::get«ef.name.toFirstUpper()»().insert_all(*_t0);
                    «ENDIF-»
                «ELSE-»
                    «IF ef.isList() || ef.isMultiple()-»
                «ef.getCPPTypeSignatureImpl()» _t0;
                ::ecorecpp::mapping::any_traits< ::«ef.EType.getFQN()» >::fromAny(_newValue, _t0);
                ::«ef.EContainingClass.getFQN()»::add«ef.name.toFirstUpper()»(_t0);
                    «ELSE-»
                ::ecorecpp::mapping::any_traits< ::«ef.EType.getFQN()» >::fromAny(_newValue, «ef.getMemberName()»);
                    «ENDIF-»
                «ENDIF-»
            }
            return;
    «ENDFOREACH»
    }
    throw "Error";
}

::ecore::EBoolean «name»::eIsSet ( ::ecore::EInt _featureID)
{
    switch (_featureID)
    {
    «FOREACH EAllStructuralFeatures.select(e|e.EType.ETypeParameters.isEmpty) AS ef-»
        case «ef.getCPPFQN()» :
            «IF EReference.isInstance(ef)-»
                «IF ef.upperBound == 1-»
            return «ef.getMemberName()»;
                «ELSE-»
            return «ef.getMemberName()» && «ef.getMemberName()»->size();
                «ENDIF-»
            «ELSE-»
                «IF ef.isList() || ef.isMultiple()-»
            return «ef.getMemberName()».size();
                «ELSE-»
                    «IF ef.defaultValueLiteral != null -»
            return «ef.getMemberName()» != «ef.defaultValueLiteral»;
                    «ELSE-»
            return ::ecorecpp::mapping::set_traits< ::«ef.EType.getFQN()» >::is_set(«ef.getMemberName()»);
                    «ENDIF-»
                «ENDIF-»
            «ENDIF-»
    «ENDFOREACH»
    }
    throw "Error";
}

void «name»::eUnset ( ::ecore::EInt _featureID)
{
    switch (_featureID)
    {
    «FOREACH EAllStructuralFeatures.select(e|e.unsettable) AS ef-»
       «REM»
        case «ef.getCPPFQN()» :
            «IF EClass.isInstance(ef.EType)-»
                «IF ef.upperBound == 1-»
            «ef.getMemberName()» = NULL;
                «ELSE-»
            «ef.getMemberName()».clear();
                «ENDIF-»
            «ELSE-»
                «IF ef.isList() || ef.isMultiple()-»
            «ef.getMemberName()».clear();
                «ELSE-»
                    «IF ef.defaultValueLiteral != null -»
            «ef.getMemberName()» = «ef.defaultValueLiteral»;
                    «ELSE-»
            ::ecorecpp::mapping::set_traits< ::«ef.EType.getFQN()» >::unset(«ef.getMemberName()»);
                    «ENDIF-»
                «ENDIF-»
            «ENDIF-»
            return;
        «ENDREM»
    «ENDFOREACH»
    }
    throw "Error";
}

::ecore::EClass_ptr «name»::_eClass ()
{
    «LET "::"+EPackage.getFQN()+"::"+EPackage.getPackageName() AS pkg-»
    static ::ecore::EClass_ptr _eclass = dynamic_cast< «pkg»_ptr > («pkg»::_instance())->«EPackage.getPackageGetAttribute(this)»();
    return _eclass;
    «ENDLET-»
}

«ENDFILE»
«ENDDEFINE»