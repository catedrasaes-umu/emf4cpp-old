grammar xtext.IDL with org.eclipse.xtext.common.Terminals

// TODO: arreglar FixedDef (ejemplo de dani)

import 'classpath:/examples/IDLMM.ecore' as IDL

//generate iDL "http://www.xtext.org/IDL"

specification   returns IDL::TranslationUnit
	:	(includes += include_decl)* (contains+=definition)+
	;


include_decl returns IDL::Include
	:	'#include' importURI = STRING
	;


definition returns IDL::Contained
	:	type_decl ';'
	|	const_decl ';'
	|	except_decl ';'
	|	interface_decl ';'
	|	interface_fwd ';'
	|	module ';'
	//|	value ';'	//value pertenece a corba 2.3
	//|	type_id_decl ';'
	//|	type_prefix_decl ';'
	//|	event ';'
	//|	component ';'
	//|	home_decl ';'
	;

module returns IDL::ModuleDef
	:	'module' identifier=ID '{' (contains+=definition)+ '}'
	;

interface_decl returns IDL::InterfaceDef
	:	( isAbstract?='abstract' | isCustom?='local' )? 'interface' identifier=ID
		( ':' derivesFrom+=[IDL::InterfaceDef]
		( ',' derivesFrom+=[IDL::InterfaceDef] )* )? '{' (contains += export)* '}'
	;

interface_fwd
	:	( 'abstract' | 'local' )? 'interface' ID
	;


export returns IDL::Contained
	:	type_decl ';'
	|	const_decl ';'
	|	except_decl ';'
	|	attr_decl ';'
	|	op_decl ';'
//	|	type_id_decl ';'
//	|	type_prefix_decl ';'
	;


op_decl returns IDL::OperationDef
	:	( isOneway?= 'oneway' )? (containedType=op_type_spec | sharedType=[IDL::TypedefDef])
		identifier=ID '(' ( parameters += param_decl (',' parameters += param_decl)* )? ')'
		( 'raises' '(' canRaise+=[IDL::ExceptionDef] (',' canRaise+=[IDL::ExceptionDef])* ')' )?
		( 'context' '(' contexts+=STRING (',' contexts+=STRING)* ')' )?
	;


op_type_spec returns IDL::IDLType
	:	base_type_spec
	|	{IDL::PrimitiveDef} kind = void_type
	;


param_decl returns IDL::ParameterDef
	:	direction=param_attribute (containedType=base_type_spec | sharedType=[IDL::TypedefDef])
		identifier=ID
	;

attr_decl returns IDL::AttributeDef
	:	readonly_attr_spec
	|	attr_spec
	;


readonly_attr_spec returns IDL::AttributeDef
	:	isReadonly?='readonly' 'attribute' (containedType=base_type_spec | sharedType=[IDL::TypedefDef])
		identifier=ID
		'raises' '(' getRaises+=[IDL::ExceptionDef] (',' getRaises+=[IDL::ExceptionDef] )* ')'
	|	isReadonly?='readonly' 'attribute' (containedType=base_type_spec | sharedType=[IDL::TypedefDef])
		identifier = ID
	;


attr_spec returns IDL::AttributeDef
	:	'attribute' (containedType=base_type_spec | sharedType=[IDL::TypedefDef])
		identifier = ID
		('getraises' '(' getRaises+=[IDL::ExceptionDef] ( ',' getRaises+=[IDL::ExceptionDef] )* ')' ('setraises' '(' setRaises+=[IDL::ExceptionDef] ( ',' setRaises+=[IDL::ExceptionDef] )* ')')? |
		'setraises' '(' setRaises+=[IDL::ExceptionDef] ( ',' setRaises+=[IDL::ExceptionDef] )* ')' )
	|	'attribute' (containedType=base_type_spec | sharedType=[IDL::TypedefDef])
		identifier = ID
	;


except_decl returns IDL::ExceptionDef
	:	'exception' identifier=ID '{' (members += member)* '}'
	;

type_decl returns IDL::TypedefDef
	:	alias_type
	|	struct_type
	|	union_type
	|	enum_type
	|	'native' ID
	|	constr_forward_decl
	;
	
alias_type returns IDL::AliasDef
	:	'typedef' containedType = array_type_spec identifier = id_array
	|	'typedef' (containedType=simple_type_spec | sharedType = [IDL::TypedefDef]) identifier = ID
	;

id_array
	:	ID ('['const_exp']')+
	;

array_type_spec returns IDL::ArrayDef
	:	(containedType=simple_type_spec | sharedType=[IDL::TypedefDef])
	;

simple_type_spec returns IDL::IDLType
	:	base_type_spec
	|	template_type_spec
	;


base_type_spec returns IDL::PrimitiveDef
	:	primitive_def
	|	kind = object_type
	;


template_type_spec returns IDL::IDLType
	:	sequence_type
	|	stringdef_type
	|	wide_stringdef_type
	|	fixed_pt_type
	;


constr_type_spec returns IDL::TypedefDef
	:	struct_type
	|	union_type
	|	enum_type
	;

struct_type returns IDL::StructDef
	:	'struct' identifier=ID '{' (members += member)+ '}'
	;

member returns IDL::Field
	:	containedType = array_type_spec identifier= id_array ';'
	|	containedType = simple_type_spec identifier=ID ';'
	|	sharedType = [IDL::TypedefDef] identifier=ID ';'
	;

union_type returns IDL::UnionDef
	:	'union' identifier=ID
		'switch' '(' (containedDiscrim = switch_type_spec_cont | sharedDiscrim = [IDL::EnumDef]) ')'
		'{' (unionMembers += case_stmt)+ '}'
	;

switch_type_spec_cont returns IDL::IDLType
	:	integer_type
	|	{IDL::PrimitiveDef} kind=char_type
	|	{IDL::PrimitiveDef} kind=boolean_type
	|	enum_type
	;

case_stmt returns IDL::UnionField
	:	('case' label+=const_exp ':' | label+='default' ':')+
		containedType = array_type_spec
		identifier= id_array ';'
	|	('case' label+=const_exp ':' | label+='default' ':')+
		(containedType = simple_type_spec | sharedType = [IDL::TypedefDef])
		identifier=ID ';'
	;


enum_type returns IDL::EnumDef
	:	'enum' identifier=ID
		'{' members+= ID (',' members+=ID)+ '}'
	;

constr_forward_decl
	:	'struct' ID
	|	'union' ID
	;


// FIXME: las constantes de tipo FixedDef tienen un value distinto (no const_exp) 12.34D
// TODO: implementar plantilla xtend para completar los datos de los elementos containedType
//       como por ejemplo el fixedDef y sus campos parte real y parte flotante
// TODO: comprobar con xtend o cheq que el sharedType es un alias de un tipo básico!!
const_decl returns IDL::ConstantDef
	:	'const' (containedType = const_type | sharedType = [IDL::AliasDef])
		identifier= ID '=' constValue = const_exp
	;



const_type returns IDL::IDLType
	:	primitive_def
	|	stringdef_type
	|	wide_stringdef_type
	|	fixed_pt_const_type
	;


primitive_def returns IDL::PrimitiveDef
	:	integer_type
	|	floating_pt_type
	|	charstr_type
	|	other_type
	;



//----------------------------
//		DECLARATORS
//----------------------------
/*
declarators
	:	declarator ( ',' declarator )*
	;

simple_declarators
	:	(simple_declarator (',' simple_declarator)*)
	;

declarator
	:	simple_declarator
	|	complex_declarator
	;

simple_declarator
	:	ID
	;

// TODO: añadir el arraydef!!!
complex_declarator
	:	ID ('[' const_exp ']')+
	;
*/


//---------------------------
// TEMPLATE TYPES
//---------------------------

sequence_type returns IDL::SequenceDef
	:	'sequence' '<' (containedType = simple_type_spec | sharedType = [IDL::TypedefDef]) (',' bound = const_exp)? '>'
	;

stringdef_type returns IDL::StringDef
	:	'string' '<' bound = const_exp '>'
	;

wide_stringdef_type returns IDL::WstringDef
	:	'wstring' '<' bound = const_exp '>'
	;

fixed_pt_type returns IDL::FixedDef
	:	'fixed' '<' digits = const_exp ','
		scale = const_exp '>'
	;



//---------------------------
// PARAMETER MODES
//---------------------------

enum param_attribute returns IDL::ParameterMode
	:	PARAM_IN='in'
	|	PARAM_OUT='out'
	|	PARAM_INOUT='inout'
	;




//---------------------------
// BASE TYPES
//---------------------------


floating_pt_type returns IDL::PrimitiveDef
	:	kind = float_type
	|	kind = double_type
	|	kind = longdouble_type
	;

enum float_type returns IDL::PrimitiveKind
	:	PK_FLOAT = 'float'
	;

enum double_type returns IDL::PrimitiveKind
	:	PK_DOUBLE = 'double'
	;

longdouble_type returns IDL::PrimitiveKind
	:	'long' 'double'
	;


integer_type returns IDL::PrimitiveDef
	:	kind = short_type
	|	kind = long_type
	|	kind = longlong_type
	|	kind = ushort_type
	|	kind = ulong_type
	|	kind = ulonglong_type
	;

enum short_type returns IDL::PrimitiveKind
	:	PK_SHORT = 'short'
	;

enum long_type returns IDL::PrimitiveKind
	:	PK_LONG = 'long'
	;

longlong_type returns IDL::PrimitiveKind
	:	'long' 'long'
	;

ushort_type returns IDL::PrimitiveKind
	:	'unsigned' 'short'
	;

ulong_type returns IDL::PrimitiveKind
	:	'unsigned' 'long'
	;

ulonglong_type returns IDL::PrimitiveKind
	:	'unsigned' 'long' 'long'
	;



charstr_type returns IDL::PrimitiveDef
	:	kind = char_type
	|	kind = wide_char_type
	|	kind = string_type
	|	kind = wide_string_type
	;

enum char_type returns IDL::PrimitiveKind
	:	PK_CHAR = 'char'
	;

enum wide_char_type returns IDL::PrimitiveKind
	:	PK_WCHAR = 'wchar'
	;

enum string_type returns IDL::PrimitiveKind
	:	PK_STRING = 'string'
	;

enum wide_string_type returns IDL::PrimitiveKind
	:	PK_WSTRING = 'wstring'
	;


other_type returns IDL::PrimitiveDef
	:	kind = boolean_type
	|	kind = octet_type
	|	kind = any_type
	;
	
enum boolean_type returns IDL::PrimitiveKind
	:	PK_BOOLEAN = 'boolean'
	;

enum octet_type returns IDL::PrimitiveKind
	:	PK_OCTET = 'octet'
	;

enum any_type returns IDL::PrimitiveKind
	:	PK_ANY = 'any'
	;


enum object_type returns IDL::PrimitiveKind
	:	PK_OBJREF = 'Object'
	;

enum void_type returns IDL::PrimitiveKind
	:	PK_VOID = 'void'
	;

/*FIXME: it needs to have a value in any of its properties: digits, scale*/
fixed_pt_const_type returns IDL::FixedDef
	:	scale='fixed'
	;



//---------------------------
// CONST EXP
//---------------------------

const_exp
	:	or_expr
	;

or_expr
	:	xor_expr ( '|' xor_expr )*
	;

xor_expr
	:	and_expr ( '^' and_expr )*
	;

and_expr
	:	shift_expr ( '&' shift_expr )*
	;

shift_expr
	:	add_expr ( ( '>>' | '<<' ) add_expr )*
	;

add_expr
	:	mult_expr ( ( '+' | '-' ) mult_expr )*
	;

mult_expr
	:	unary_expr ( ( '*' | '/' | '%' ) unary_expr )*
	;

unary_expr
	:	unary_operator primary_expr
	|	primary_expr
	;

unary_operator
	:	'-'
	|	'+'
	|	'~'
	;

primary_expr
	:	ID
	|	literal
	|	'(' const_exp ')'
	;

literal
	:	INT
	|	STRING
	/*:	HEX_LITERAL
	|	INTEGER_LITERAL
	|	STRING_LITERAL*/
	|	WIDE_STRING_LITERAL
	/*|	CHARACTER_LITERAL
	|	WIDE_CHARACTER_LITERAL*/
	|	FIXED_PT_LITERAL
	|	FLOATING_PT_LITERAL
	|	BOOLEAN_LITERAL
	;

terminal WIDE_STRING_LITERAL
	:	'L' STRING
	;

terminal FIXED_PT_LITERAL
	:	INT '.' INT (('e'|'E') ('+'|'-')? INT)?
	|	'.' INT (('e'|'E') ('+'|'-')? INT)?
	|	INT (('e'|'E') ('+'|'-')? INT)
	;

terminal FLOATING_PT_LITERAL
	:	INT '.' INT ('d'|'D')
	|	INT ('d'|'D')
	|	'.' INT ('d'|'D')
	;

terminal BOOLEAN_LITERAL
	:	'TRUE'
	|	'FALSE'
	;

terminal ID :
	('a'..'z'|'A'..'Z'|'_'|'::') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'::')*;

terminal STRING	: 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
