«IMPORT xtext»

«EXTENSION template::FQN»
«EXTENSION template::Rules»

«DEFINE main FOR Grammar»
	«EXPAND GrammarBody FOR this»
«ENDDEFINE»

«DEFINE GrammarBody FOR Grammar»
«FOREACH usedGrammars AS e»
	«EXPAND GrammarBody FOR e»
«ENDFOREACH-»

«FILE fileName()+"_parser.hpp"-»
#ifndef «parserHeader()»
#define «parserHeader()»

#include <boost/spirit/include/qi.hpp>
#include <boost/spirit/include/phoenix.hpp>
#include <boost/spirit/include/phoenix_bind.hpp>
#include <boost/fusion/include/adapt_struct.hpp>

#include <ecore.hpp>
#include <ecorecpp/ecorecpp.hpp>
#include <string>

	«FOREACH metamodelDeclarations.ePackage AS pkg-»
#include <«pkg.getFQN()».hpp>
	«ENDFOREACH-»
	
	«FOREACH usedGrammars AS e-»
#include "«e.fileName()»_parser.hpp"
	«ENDFOREACH-»
	
#ifndef QIPARSER_BASE
#define QIPARSER_BASE
namespace qi = boost::spirit::qi;
namespace ascii = boost::spirit::ascii;
namespace ph = boost::phoenix;

struct eobject
{
    ecore::EObject_ptr obj;

    inline eobject(): obj(0) {}
};

BOOST_FUSION_ADAPT_STRUCT(
    eobject,
    (ecore::EObject_ptr, obj)
)
#endif // QIPARSER_BASE
	
template <typename Iterator>
struct «getName()»_parser 
    : qi::grammar<Iterator, «rules.first().returnType()»(), ascii::space_type>
{
    «getName()»_parser() 
        : «getName()»_parser::base_type(«rules.first().getName()»,"«getName()»")
    {
        using namespace ::boost::spirit;
        using namespace ::boost::spirit::qi;
        using namespace ::boost::spirit::arg_names;
        using ::ph::bind;
        
        «FOREACH rules AS rule-»
        // «rule.getName()» = «rule.alternatives.expand()»
        
        «ENDFOREACH-»
    }
    
    «FOREACH rules AS rule-»
    qi::rule<Iterator, «rule.returnType()»(), ascii::space_type> «rule.getName()»;
    «ENDFOREACH-»
};

#endif // «parserHeader()»

«ENDFILE»
«ENDDEFINE»
