import ecore;
import xtext;

extension template::FQN;

String returns(AbstractRule this) :
	if EClass.isInstance(type.classifier) then
		"returns [ " + type.classifier.getReturnType() + " _returned ]"
	else
		""
;
		
String getName(AbstractRule this):
	if ParserRule.isInstance(this) then
		"rule" + name
	else
		"RULE_" +name
;

// AS
Alternatives asAlternatives(AbstractElement this) :
	(Alternatives) this
;
Group asGroup(AbstractElement this) :
	(Group) this
;
RuleCall asRuleCall(AbstractElement this) :
	(RuleCall) this
;
Keyword asKeyword(AbstractElement this) :
	(Keyword) this
;
Assignment asAssignment(AbstractElement this) :
	(Assignment) this
;
CrossReference asCrossReference(AbstractElement this) :
	(CrossReference) this
;
CharacterRange asCharacterRange(AbstractElement this) :
	(CharacterRange) this
;
NegatedToken asNegatedToken(AbstractElement this) :
	(NegatedToken) this
;
UntilToken asUntilToken(AbstractElement this) :
	(UntilToken) this
;

// AbstractElements
String expand(AbstractElement this) :
	 if cardinality != null then
	 '(' + expandSubType() + ')' + cardinality
	 else
	 	expandSubType()
;

String variable(AbstractRule this) :
	name.toLowerCase()
;

String checkAssignment(RuleCall this) :
	if !Assignment.isInstance(eContainer) then
		"( " + rule.variable() + "=" + rule.getName() + " {" + "_returned = " + rule.variable() +"; })"
	else
		rule.getName()
;

String expandSubType(AbstractElement this) :
	if Keyword.isInstance(this) then
		"'" + this.asKeyword().value.getKeyword() + "'"
	else if RuleCall.isInstance(this) then
		asRuleCall().checkAssignment()
	else if Assignment.isInstance(this) then
		'(' + asAssignment().feature + '=' + asAssignment().terminal.expand() + asAssignment().process() + ')'
	else if Group.isInstance(this) then
		"(" + asGroup().elements.expandGroup() + ")"
	else if CrossReference.isInstance(this) then
		"RULE_ID"
	else if CharacterRange.isInstance(this) then
		asCharacterRange().left.expand() + ".." + asCharacterRange().right.expand() 
	else if Alternatives.isInstance(this) then
		"(" + asAlternatives().asGroup().elements.expandGroup(" | ") + ")"
	else if NegatedToken.isInstance(this) then
		"~" + asNegatedToken().terminal.expand()
	else if UntilToken.isInstance(this) then
		"(.)* " + asUntilToken().terminal.expand()
	else if Wildcard.isInstance(this) then
		"."
;

String expandGroup(List[AbstractElement] this) :
	expandGroup(" ");

String expandGroup(List[AbstractElement] this, String separator) :
	if size > 1 then
		first().expand() + separator + withoutFirst().expandGroup(separator)
	else if size == 1 then
		first().expand()
	else
		"" 
;

String getKeyword(String this) :
	this.replaceAll("\\\\","\\\\\\\\")
		.replaceAll("\n","\\\\n")
		.replaceAll("\t","\\\\t")
		.replaceAll("\r","\\\\r")
		//.replaceAll("\"","\\\\\"")
		.replaceAll("'","\\\\'")
;

String process(Assignment this) :
	if CrossReference.isInstance(terminal) then
		" { " +
		terminal.asCrossReference().type.classifier.getReturnType() +
		" _" + feature + " = " +
		"ast_node::find< " +
		terminal.asCrossReference().type.classifier.getReturnType() +
		" >( xtextpp::token_to< std::string >(" + feature + ")); " +
		"if (_" + feature + ") _returned->" + processImpl("_" + feature) + ";" +
		"}" // TODO: scoping
	else
		" { " + initializeReturned() + " _returned->" + processImpl() + ";} "
;

AbstractRule getRule(AbstractElement this) :
	if AbstractRule.isInstance(eContainer) then
		((AbstractRule) eContainer)
	else
		((AbstractElement)eContainer).getRule()
;

String createRule(AbstractRule this) :
	let cl = type.classifier :
	let pk = cl.ePackage :
	"_returned = " + pk.getFQN() + "::" + pk.name.toFirstUpper() + "Factory::_instance()->create" + cl.name.toFirstUpper() + "();"
;

String initializeReturned(Assignment this) :
	"if (!_returned) " + getRule().createRule() 
;

String processImpl(Assignment this) :
	processImpl(getFeature())
;

String processImpl(Assignment this, String feature_var) :
	if operator == "=" then
		"set" + feature.toFirstUpper() + "(" + feature_var + ")"
	else if operator == "?=" then
		"set" + feature.toFirstUpper() + "(true)"
	else if operator == "+=" then
		"add" + feature.toFirstUpper() + "(" + feature_var + ")"
;

String getFeature(Assignment this) :
	if RuleCall.isInstance(terminal) && TerminalRule.isInstance(((RuleCall)terminal).rule) then
		"xtextpp::token_to< "+ ((RuleCall)terminal).rule.type.classifier.getFQN() +" >(" + feature + ")"
	else
		feature
;

String post(AbstractRule this) :
	if TerminalRule.isInstance(this) && name == "WS" then
		"{$channel=HIDDEN;}"
	else
		""
;

